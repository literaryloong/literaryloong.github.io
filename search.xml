<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu 中安装 Docker CE</title>
    <url>/2020/03/28/docker-install/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>系统要求<ul>
<li>ununtu 16.04 LTS </li>
</ul>
</li>
<li>卸载旧版本</li>
</ul>
<a id="more"></a>

<blockquote>
<p>如果安装有旧版本的docker(旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>) ，先卸载它</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><h3 id="1-1-使用-apt-安装"><a href="#1-1-使用-apt-安装" class="headerlink" title="1.1 使用 apt 安装"></a>1.1 使用 <code>apt</code> 安装</h3><blockquote>
<p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。</p>
</blockquote>
<blockquote>
<p>鉴于国内网络问题，建议使用国内源，注释部分是官方源</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"><span class="comment"># 中科大的源</span></span><br><span class="line">$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面添加 docker 软件源</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span></span><br><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要测试或每日构建版本的 Docker CE 请将 stable 改为 test 或者 nightly。</p>
</blockquote>
<blockquote>
<p>更新 apt 软件包缓存，并安装 <code>docker-ce</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：也可以指定版本安装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $ apt-cache madison docker-ce</span><br><span class="line"># $ sudo apt-get install docker-ce&#x3D;&lt;VERSION_STRING&gt; docker-ce-cli&#x3D;&lt;VERSION_STRING&gt; containerd.io</span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h3 id="1-2-手动安装"><a href="#1-2-手动安装" class="headerlink" title="1.2  手动安装"></a>1.2  手动安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://download.docker.com/linux/ubuntu/dists/ 在这里选择下载安装包</span></span><br><span class="line">$ sudo dpkg -i /path/to/package.deb</span><br></pre></td></tr></table></figure>
<h3 id="1-3-使用脚本自动安装"><a href="#1-3-使用脚本自动安装" class="headerlink" title="1.3 使用脚本自动安装"></a>1.3 使用脚本自动安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line"><span class="comment"># $ sudo sh get-docker.sh --mirror Aliyun</span></span><br><span class="line"><span class="comment"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-测试安装成功"><a href="#1-4-测试安装成功" class="headerlink" title="1.4 测试安装成功"></a>1.4 测试安装成功</h3><h2 id="2-使用非-root-用户管理-docker"><a href="#2-使用非-root-用户管理-docker" class="headerlink" title="2 使用非 root 用户管理 docker"></a>2 使用非 <code>root</code> 用户管理 docker</h2><h3 id="2-1-创建-docker-用户组"><a href="#2-1-创建-docker-用户组" class="headerlink" title="2.1 创建 docker 用户组"></a>2.1 创建 docker 用户组</h3><blockquote>
<p>现在安装完成，会自动创建docker 用户组</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $ sudo groupadd docker</span></span><br><span class="line"><span class="comment"># 将当前用户添加到 docker 组</span></span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>重新登录，进行测试</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ newgrp docker </span><br><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果遇到以下错误提示：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: Error loading config file: /home/user/.docker/config.json -</span><br><span class="line"><span class="built_in">stat</span> /home/user/.docker/config.json: permission denied</span><br></pre></td></tr></table></figure>
<p>两个方法解决：</p>
<blockquote>
<ol>
<li>把 用户目录下的 <code>.docker</code> 文件夹删除</li>
<li>使用下面的命令修复</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chown <span class="string">"<span class="variable">$USER</span>"</span>:<span class="string">"<span class="variable">$USER</span>"</span> /home/<span class="string">"<span class="variable">$USER</span>"</span>/.docker -R</span><br><span class="line">$ sudo chmod g+rwx <span class="string">"<span class="variable">$HOME</span>/.docker"</span> -R</span><br></pre></td></tr></table></figure>

<h2 id="3-配置docker-自启"><a href="#3-配置docker-自启" class="headerlink" title="3 配置docker 自启"></a>3 配置docker 自启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 取消自启</span></span><br><span class="line">$ sudo systemctl <span class="built_in">disable</span> docker</span><br></pre></td></tr></table></figure>

<h2 id="4-配置镜像加速"><a href="#4-配置镜像加速" class="headerlink" title="4 配置镜像加速"></a>4 配置镜像加速</h2><blockquote>
<p>前面看到了我们使用镜像时，镜像拉取特别慢，有些甚至无法获取。这时候我们可以配置镜像加速。</p>
<p>国内一些云服务商提供了国内的镜像加速服务</p>
<p>如：</p>
</blockquote>
<ul>
<li><a href="https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy" target="_blank" rel="noopener">Azure 中国镜像 <code>https://dockerhub.azk8s.cn</code></a></li>
<li><a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors" target="_blank" rel="noopener">阿里云加速器(需登录账号获取)</a></li>
<li><a href="https://www.163yun.com/help/documents/56918246390157312" target="_blank" rel="noopener">网易云加速器 <code>https://hub-mirror.c.163.com</code></a></li>
</ul>
<h3 id="4-1-配置"><a href="#4-1-配置" class="headerlink" title="4.1 配置"></a>4.1 配置</h3><blockquote>
<ul>
<li>新的版本修改配置文件 <code>/etc/docker/daemon.json</code> ：</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://dockerhub.azk8s.cn"</span>,</span><br><span class="line">    <span class="string">"https://hub-mirror.c.163.com"</span>,</span><br><span class="line">    <span class="string">"https://ktrsh7na.mirror.aliyuncs.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>老版教程 编辑  <code>/etc/systemd/system/multi-user.target.wants/docker.service</code> 文件</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到  ExecStart= 追加  --registry-mirror=https://ktrsh7na.mirror.aliyuncs.com</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 上面提到的两种方法，只能使用一种，不能同时修改</p>
</blockquote>
<blockquote>
<p>然后重启docker服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面检查加速器是否生效</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure>

<h3 id="4-2-应用"><a href="#4-2-应用" class="headerlink" title="4.2 应用"></a>4.2 应用</h3><blockquote>
<p>国内无法直接获取 <code>gcr.io/*</code> 镜像，我们可以将 <code>gcr.io//:</code> 替换为 <code>gcr.azk8s.cn//:</code> </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $ docker pull gcr.io/google_containers/hyperkube-amd64:v1.9.2</span></span><br><span class="line">$ docker pull gcr.azk8s.cn/google_containers/hyperkube-amd64:v1.9.2</span><br></pre></td></tr></table></figure>



<h2 id="5-卸载docker"><a href="#5-卸载docker" class="headerlink" title="5 卸载docker"></a>5 卸载docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br><span class="line"><span class="comment"># 上面命令不会自动删除 主机上的镜像、容器、卷或自定义配置文件。 删除所有镜像、容器和卷</span></span><br><span class="line">$ sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>k8s&amp;docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 容器管理常用命令解析</title>
    <url>/2020/04/05/docker-commond/</url>
    <content><![CDATA[<h2 id="1-容器生命周期管理"><a href="#1-容器生命周期管理" class="headerlink" title="1 容器生命周期管理"></a>1 容器生命周期管理</h2><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>  <strong>语法</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong><code>-d</code>:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong><code>-i</code>:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong><code>-P</code>:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li>
<li><strong><code>-p</code>:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>
<li><strong><code>-t</code>:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong><code>--name</code>:</strong> 为容器指定一个名称；</li>
<li><strong><code>--link</code>:</strong> 添加链接到另一个容器；</li>
<li><strong><code>--expose</code>:</strong> 开放一个端口或一组端口；</li>
<li><strong><code>--volume</code> , <code>-v</code>:</strong> 绑定一个卷</li>
</ul>
</blockquote>
<p> <strong>实例</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --name myghost -d ghost:latest</span><br><span class="line"></span><br><span class="line">$ docker run -P -d ghost:latest</span><br><span class="line"></span><br><span class="line">$ docker run -p 8000:2368 -d ghost:last</span><br><span class="line"></span><br><span class="line">$ docker run -it ghost:last /bin/bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
</blockquote>
<h3 id="start-stop-restart"><a href="#start-stop-restart" class="headerlink" title="start/stop/restart"></a>start/stop/restart</h3><blockquote>
<p><strong>docker start</strong> :启动一个或多个已经被停止的容器</p>
<p><strong>docker stop</strong> :停止一个运行中的容器</p>
<p><strong>docker restart</strong> :重启容器</p>
</blockquote>
<p>  <strong>语法</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">$ docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">$ docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>

<p>  <strong>实例</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker start myghost</span><br><span class="line">$ docker stop myrunoob</span><br><span class="line">$ docker restart myrunoob</span><br></pre></td></tr></table></figure>

<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote>
<p><strong>docker rm ：</strong>删除一个或多个容器。</p>
</blockquote>
<p>  <strong>语法</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong>通过 SIGKILL 信号强制删除一个运行中的容器。</li>
<li><strong>-l :</strong>移除容器间的网络连接，而非容器本身。</li>
<li><strong>-v :</strong>删除与容器关联的卷。</li>
</ul>
</blockquote>
<p>  <strong>实例</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rm -f myghost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有已经停止的容器</span></span><br><span class="line">$ docker rm $(docker ps -a -q)</span><br><span class="line"><span class="comment"># 清理所有处于终止状态的容器</span></span><br><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure>




<h2 id="2-容器操作"><a href="#2-容器操作" class="headerlink" title="2 容器操作"></a>2 容器操作</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><blockquote>
<p><strong>docker ps :</strong> 列出容器</p>
</blockquote>
<p>  <strong>语法</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps [OPTIONS]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-a :</strong>显示所有的容器，包括未运行的。</li>
<li><strong>-f :</strong>根据条件过滤显示的内容。</li>
<li><strong>–format :</strong>指定返回值的模板文件。</li>
<li><strong>-l :</strong>显示最近创建的容器。</li>
<li><strong>-n :</strong>列出最近创建的n个容器。</li>
<li><strong>–no-trunc :</strong>不截断输出。</li>
<li><strong>-q :</strong>静默模式，只显示容器编号。</li>
<li><strong>-s :</strong>显示总的文件大小。</li>
</ul>
</blockquote>
<p>  <strong>实例</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure>

   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONTAINER ID	IMAGE		COMMAND				CREATED					STATUS		PORTS		NAMES</span><br><span class="line">31948620b4e9	ubuntu		&quot;&#x2F;bin&#x2F;bash&quot;			33 seconds ago		Up 32 seconds 				infallible_mahavira</span><br><span class="line">908dae191777   ghost:v3   &quot;docker-entrypoint.s…&quot;	3 hours ago  Up 3 hours    2368&#x2F;tcp  condescending_sutherland</span><br><span class="line">e87b3c175433   ghost:v2   &quot;docker-entrypoint.s…&quot;   3 hours ago  Up 3 hours    2368&#x2F;tcp    eloquent_hoover</span><br><span class="line">8251ca2ebd72   ghost     &quot;docker-entrypoint.s…&quot;   3 hours ago  Up 3 hours    2368&#x2F;tcp    jolly_varahamihira</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出详情介绍：</p>
<p><strong>CONTAINER ID:</strong> 容器 ID。</p>
<p><strong>IMAGE:</strong> 使用的镜像。</p>
<p><strong>COMMAND:</strong> 启动容器时运行的命令。</p>
<p><strong>CREATED:</strong> 容器的创建时间。</p>
<p><strong>STATUS:</strong> 容器状态。</p>
<p><strong>PORTS:</strong> 容器的端口信息和使用的连接类型（tcp\udp）。</p>
<p><strong>NAMES:</strong> 容器名称。</p>
</blockquote>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出最近创建的5个容器</span></span><br><span class="line">$ docker ps -n 5</span><br></pre></td></tr></table></figure>

<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><blockquote>
<p>查看容器中运行的进程</p>
</blockquote>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker top 908d</span><br><span class="line">UID			PID			PPID			C			STIME			TTY			TIME			CMD</span><br><span class="line">dragon 		7493  		7468    		0    		Mar11    		?      00:00:06     node current/index.js</span><br></pre></td></tr></table></figure>

<h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><blockquote>
<p>查看日志</p>
</blockquote>
<p>  <strong>语法</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker logs [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure>
<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong> 跟踪日志输出</li>
<li><strong>–since :</strong>显示某个开始时间的所有日志</li>
<li><strong>-t :</strong> 显示时间戳</li>
<li><strong>–tail :</strong>仅列出最新N条容器日志</li>
</ul>
</blockquote>
<p>  <strong>实例</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker logs e87b --tail 10</span><br><span class="line">[2020-03-11 09:47:33] INFO Model: User</span><br><span class="line">[2020-03-11 09:47:36] INFO Model: Post</span><br><span class="line">[2020-03-11 09:47:36] INFO Model: Integration</span><br><span class="line">[2020-03-11 09:47:36] INFO Relation: Role to Permission</span><br><span class="line">[2020-03-11 09:47:36] INFO Relation: Post to Tag</span><br><span class="line">[2020-03-11 09:47:37] INFO Relation: User to Role</span><br><span class="line">[2020-03-11 09:47:39] INFO Ghost is running <span class="keyword">in</span> production...</span><br><span class="line">[2020-03-11 09:47:39] INFO Your site is now available on http://localhost:2368/</span><br><span class="line">[2020-03-11 09:47:39] INFO Ctrl+C to shut down</span><br><span class="line">[2020-03-11 09:47:39] INFO Ghost boot 9.19s</span><br><span class="line"></span><br><span class="line">$ docker logs --since=<span class="string">"2020-03-11"</span> --tail=10 myghost</span><br></pre></td></tr></table></figure>

<h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">$ docker ps</span><br><span class="line"></span><br><span class="line">$ docker attach <span class="variable">$&#123;ubuntu-id&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用这个命令退出后，会导致容器的停止，所以我们一般不用这个命令</p>
</blockquote>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><blockquote>
<p>配合 -i -t 参数使用</p>
</blockquote>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &#123;container&#125; /bin/bash</span><br></pre></td></tr></table></figure>



<h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID	IMAGE        COMMAND            CREATED      STATUS    		PORTS  			NAMES</span><br><span class="line">c03cc0150ec0	centos		<span class="string">"/bin/bash"</span> 			  11 hours ago 	  Up 11 hours			    competent_faraday</span><br><span class="line">908dae191777   ghost:v3   <span class="string">"docker-entrypoint.s…"</span>   14 hours ago   Up 14 hours   2368/tcp   condescendi_serland</span><br><span class="line">e87b3c175433   ghost:v2   <span class="string">"docker-entrypoint.s…"</span>   14 hours ago   Up 14 hours   2368/tcp   eloquent_hoover</span><br><span class="line">8251ca2ebd72   ghost     <span class="string">"docker-entrypoint.s…"</span>   14 hours ago   Up 14 hours   2368/tcp   jolly_varahamihira</span><br><span class="line">$ docker <span class="built_in">export</span> c03c &gt;  centos.tar</span><br><span class="line">$ ls</span><br><span class="line">centos.tar  <span class="built_in">test</span></span><br><span class="line">$ docker import centos.tar runoob/centos:v1</span><br><span class="line">sha256:b5617da775a7029cbd39751a78648f38a6c4ea814d63afb964bc5d2ffe2d1b5e</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY        	  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">runoob/centos      		 v1                  b5617da775a7        8 seconds ago       237MB</span><br><span class="line">ghost               v5                  99199520ec4e        14 hours ago        394MB</span><br><span class="line">ghost               v4                  7d768396433e        14 hours ago        394MB</span><br><span class="line">ghost               v2                  051c57821d49        14 hours ago        394MB</span><br><span class="line">ghost               v3                  051c57821d49        14 hours ago        394MB</span><br><span class="line">ghost               latest              d37060d26de6        2 days ago          394MB</span><br><span class="line">nginx               latest              6678c7c2e56c        7 days ago          127MB</span><br><span class="line">ubuntu              latest              72300a873c2c        2 weeks ago         64.2MB</span><br><span class="line">centos              latest              470671670cac        7 weeks ago         237MB</span><br><span class="line">hello-world           latest              fce289e99eb9        14 months ago       1.84kB</span><br></pre></td></tr></table></figure>

<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><blockquote>
<p><strong>docker commit :</strong>从容器创建一个新的镜像。</p>
</blockquote>
<p> <strong>语法</strong></p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-a :</strong>提交的镜像作者</li>
<li><strong>-c :</strong>使用Dockerfile指令来创建镜像</li>
<li><strong>-m :</strong>提交时的说明文字</li>
<li><strong>-p :</strong>在commit时，将容器暂停</li>
</ul>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker commit -a <span class="string">"noob"</span> -m <span class="string">"I'm a noob."</span> 8251 noob/ghost:v1</span><br></pre></td></tr></table></figure>

<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote>
<p><strong>docker cp :</strong>用于容器与主机之间的数据拷贝。</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker cp [OPTIONS] SRC_PATH DEST_PATH</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 容器里有noob 目录,test 就会拷贝到 noob 里面</span></span><br><span class="line">$ docker cp ./<span class="built_in">test</span> c03c:/home/noob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器里没有 docker 目录,就会把 test 重命名为docker</span></span><br><span class="line">$ docker cp ./<span class="built_in">test</span> c03c:/home/docker</span><br></pre></td></tr></table></figure>



<h2 id="3-镜像仓库"><a href="#3-镜像仓库" class="headerlink" title="3 镜像仓库"></a>3 镜像仓库</h2><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><blockquote>
<p><strong>docker login :</strong> 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<p><strong>docker logout :</strong> 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker login -u user -p **** repository.anxinyun.cn</span><br></pre></td></tr></table></figure>



<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line"></span><br><span class="line">$ docker pull node</span><br></pre></td></tr></table></figure>

<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><blockquote>
<p><strong>docker push :</strong> 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker push repository.anxinyun.cn/anxinyun/console:dragon.226</span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><blockquote>
<p><strong>docker search :</strong> 从Docker Hub查找镜像</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li>–filter</li>
<li>–limit</li>
</ul>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只列出 automated build类型的镜像</span></span><br><span class="line">$ docker search --filter is-automated=<span class="literal">true</span> java</span><br><span class="line"></span><br><span class="line">$ docker search --filter is-automated=<span class="literal">true</span> --filter stars=30 java</span><br></pre></td></tr></table></figure>



<h2 id="4-本地镜像管理"><a href="#4-本地镜像管理" class="headerlink" title="4 本地镜像管理"></a>4 本地镜像管理</h2><h3 id="images"><a href="#images" class="headerlink" title="images"></a>images</h3><blockquote>
<p><strong>docker images :</strong> 列出本地镜像。</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-a :</strong>列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li>
<li><strong>–digests :</strong>显示镜像的摘要信息；</li>
<li><strong>-f :</strong>显示满足条件的镜像；</li>
<li><strong>–format :</strong>指定返回值的模板文件；</li>
<li><strong>–no-trunc :</strong>显示完整的镜像信息；</li>
<li><strong>-q :</strong>只显示镜像ID。</li>
</ul>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line"></span><br><span class="line">$ docker images  ubuntu</span><br></pre></td></tr></table></figure>

<h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h3><blockquote>
<p><strong>docker rmi :</strong> 删除本地一个或多少镜像。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rmi -f ubuntu</span><br></pre></td></tr></table></figure>

<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag ghost noob/ghost:v1</span><br></pre></td></tr></table></figure>



<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><blockquote>
<p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong>指定要使用的Dockerfile路径；</li>
<li><strong>–pull :</strong>尝试去更新镜像的新版本；</li>
<li><strong>–quiet, -q :</strong>安静模式，成功后只输出镜像 ID；</li>
<li><strong>–rm :</strong>设置镜像成功后删除中间容器；</li>
<li><strong>–tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>
</ul>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t repository.anxinyun.cn/anxinyun/console:dragon.226 --pull=<span class="literal">true</span> .</span><br></pre></td></tr></table></figure>





<h2 id="5-info-version"><a href="#5-info-version" class="headerlink" title="5 info|version"></a>5 info|version</h2><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><blockquote>
<p>docker info : 显示 Docker 系统信息，包括镜像和容器数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure>



<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><blockquote>
<p>docker version :显示 Docker 版本信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>k8s&amp;docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile常用命令解析</title>
    <url>/2020/04/11/docker-Dockerfile/</url>
    <content><![CDATA[<h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是<code>Dockerfile</code></h2><blockquote>
<p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
</blockquote>
<h2 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><blockquote>
<p>定制的镜像都是基于 FROM 的镜像。</p>
</blockquote>
<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><blockquote>
<p>用于执行后面跟着的命令行命令</p>
</blockquote>
<p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xvf redis.tar.gz</span></span><br><span class="line"><span class="comment"># 以上执行会创建 3 层镜像。可简化为以下格式：</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install wget \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xvf redis.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>如上，以 <strong>&amp;&amp;</strong> 符号连接命令，这样执行后，只会创建 1 层镜像。</p>
<h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> &lt;源路径1&gt;...  &lt;目标路径&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shell</span><span class="bash"> 格式：CMD &lt;命令&gt;</span></span><br><span class="line">exec 格式：<span class="keyword">CMD</span><span class="bash"> [<span class="string">"可执行文件"</span>, <span class="string">"参数1"</span>, <span class="string">"参数2"</span>...]</span></span><br></pre></td></tr></table></figure>

<p>可以被替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it ubuntu cat /etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换了 [/bin/bash]</span></span><br><span class="line"></span><br><span class="line">$ docker run -it ubuntu</span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo <span class="variable">$HOME</span>"</span> ]</span></span><br></pre></td></tr></table></figure>





<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><blockquote>
<p>指定 ENTRYPOINT后，如果有 CMD ，则，CMD 不再是直接运行的命令，而是作为参数传给 ENTRYPOINT 使用</p>
</blockquote>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>



<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br></pre></td></tr></table></figure>



<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;工作目录路径&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;</span><br></pre></td></tr></table></figure>



<h2 id="定制一个镜像"><a href="#定制一个镜像" class="headerlink" title="定制一个镜像"></a>定制一个镜像</h2><blockquote>
<p>定制一个镜像：jdk8 + python3 </p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像 使用 alpine</span></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="comment"># 更换软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add openjdk8 python3</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
        <category>k8s&amp;docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 使用中遇到的问题汇总</title>
    <url>/2020/04/18/docker-faq/</url>
    <content><![CDATA[<h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1:"></a>Q1:</h2><blockquote>
<p>jenkins in docker 遇到如下错误：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: Build step failed with exception</span><br><span class="line">net.sf.json.JSONException: A JSONObject text must begin with &#39;&#123;&#39; at character 0 of at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>进入jenkins 容器，进入jenkins 主目录, 删除 <code>.docker</code> 目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &#123;&#123;container&#125;&#125; /bin/bash</span><br><span class="line"></span><br><span class="line">&#123;&#123;container&#125;&#125; $ <span class="built_in">cd</span> </span><br><span class="line">&#123;&#123;container&#125;&#125; $ rm -rf .docker .dockercfg</span><br></pre></td></tr></table></figure>

<h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2:"></a>Q2:</h2><blockquote>
<p>windows 下使用 <code>Dockers-Desktop</code> 时，已经启用了 <code>Hyper-V</code>,打开 <code>Dockers-Desktop</code> 时还是会报错，不能正常使用</p>
</blockquote>
<p>管理员身份运行命令行程序：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br><span class="line"></span><br><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>

<h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3:"></a>Q3:</h2><blockquote>
<p>   docker login 登录镜像仓库时,密码正确但报如下错误：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Error saving credentials: error storing credentials - err: exit status 1, out: &#96;Cannot autolaunch D-Bus without X11 $DISPLAY&#96;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决方案：安装 <code>gnupg2</code> 和 <code>pass</code><br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gnupg2 pass</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
        <category>k8s&amp;docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
